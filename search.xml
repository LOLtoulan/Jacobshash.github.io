<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线程2之线程控制</title>
      <link href="/2019/11/13/xian-cheng-2-zhi-xian-cheng-kong-zhi/"/>
      <url>/2019/11/13/xian-cheng-2-zhi-xian-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="Java中的多线程（二）"><a href="#Java中的多线程（二）" class="headerlink" title="Java中的多线程（二）"></a>Java中的多线程（二）</h2><h4 id="一、Java中的线程控制"><a href="#一、Java中的线程控制" class="headerlink" title="一、Java中的线程控制"></a>一、Java中的线程控制</h4><blockquote><ol><li><p><strong>线程休眠</strong></p><p>方法 public static void sleep(long millis)</p></li><li><p><strong>线程加入</strong></p><p>public final void join()</p></li><li><p><strong>线程礼让</strong></p><p>public static void yield()</p></li><li><p><strong>后台线程</strong></p><p>public final void setDaemon(boolean on)</p></li><li><p><strong>中断线程</strong></p><p>public final void stop();不安全</p><p>public void interrupt();</p></li></ol></blockquote><h4 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h4><h5 id="2-1线程休眠-sleep"><a href="#2-1线程休眠-sleep" class="headerlink" title="2.1线程休眠(sleep)"></a>2.1线程休眠(sleep)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSleep</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ThreadSleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ThreadSleep</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span><span class="token operator">+</span>i <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//睡眠</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里指的是上免得华语执行完后，线程休眠了1000毫秒，也就是一秒</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数 ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSleepDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadSleep threadSleep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadSleep</span><span class="token punctuation">(</span><span class="token string">"斋藤飞鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadSleep threadSleep1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadSleep</span><span class="token punctuation">(</span><span class="token string">"桥本环奈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadSleep threadSleep2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadSleep</span><span class="token punctuation">(</span><span class="token string">"郑和惠子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadSleep<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadSleep1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadSleep2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p> <img src="1.png" alt="img"> </p><p>分析：</p><p> <img src="2.png" alt="img"> </p><p>由API我们可知，调用的准确性取决于系统定时器的准确性。</p><h5 id="2-2线程加入-join"><a href="#2-2线程加入-join" class="headerlink" title="2.2线程加入(join)"></a>2.2线程加入(join)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"斋藤飞鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"桥本环奈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"郑和惠子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        <span class="token comment" spellcheck="true">//join()</span>        <span class="token comment" spellcheck="true">//因为我非常喜欢郑和惠子，所以在我心中郑和惠子第一，所以让桥本环奈和斋藤飞鸟去抢</span>        <span class="token comment" spellcheck="true">//所以我可以让惠子的线程优先跑，让其他两个去抢，所以我就去API中寻找Thread下哪个方法可以实现，</span>        <span class="token comment" spellcheck="true">// 然后我们在API中可以发现join方法可以所以我们就用join方法，</span><span class="token comment" spellcheck="true">//        public final void join(long millis)</span><span class="token comment" spellcheck="true">//                throws InterruptedException等待这个线程死亡的时间最多为millis毫秒。 0的超时意味着永远等待。</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            myThread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：</p><p><img src="3.png" alt=""></p><h5 id="2-3线程礼让"><a href="#2-3线程礼让" class="headerlink" title="2.3线程礼让"></a>2.3线程礼让</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将方法放到这是因为，放在这可以让每一个进来的线程都执行该方法，</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"斋藤飞鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"桥本环奈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"郑和惠子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        <span class="token comment" spellcheck="true">//因为我非常喜欢郑和惠子，所以在我心中郑和惠子第一，所以让桥本环奈和斋藤飞鸟去抢</span>        <span class="token comment" spellcheck="true">//所以我可以让其他两个去抢，惠子无所谓，就想礼让一下她们，让那两个先跑，所以我就去API中寻找Thread下哪个方法可以实现，</span>        <span class="token comment" spellcheck="true">// 然后我们在API中可以发现yield()方法可以所以我们就用yield方法，</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果是：</p><p> <img src="4.png" alt="img"> </p><p>有结果可知礼让线程仅仅在一定程度上进行的礼让。并不像join一样，让某个线程一直执行完。</p><h5 id="2-4后台线程（守护线程）"><a href="#2-4后台线程（守护线程）" class="headerlink" title="2.4后台线程（守护线程）"></a>2.4后台线程（守护线程）</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"石头人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"瑞兹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"酒桶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置守护线程为true</span>        myThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"水晶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"*****"</span> <span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p> <img src="5.png" alt="img"> </p><p>由结果我们可以看出，当“水晶”线程结束时，”石头人”，”瑞兹”，”酒桶”也都相继的结束了进程，所以我们可以认为当主线程结束时，其他线程设置为守护线程的线程也相继去世。就像英雄联盟中，每个英雄存在的意义就是守护水晶，如果水晶一旦告破，游戏就直接结束，英雄也就失去了意义。守护线程也是这样。</p><h5 id="2-5中断线程"><a href="#2-5中断线程" class="headerlink" title="2.5中断线程"></a>2.5中断线程</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束执行"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"石头人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            myThread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myThread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被中止了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p> <img src="6.png" alt="img"> </p><p>由代码及运行结果我们看出：我们循环的是0~100，但是程序运行到31就结束了，说明我们的stop();函数起作用了，但是由于这种方法太过暴力，所以不安全，比如我们在MyThread线程中如果还有其他代码需要执行，但是由于stop方法直接将进程给杀了，就没法干其他的事了，就好像MyThread方法中的for循环之后的代码就没有执行。Java8中给出的解释是：</p><p><img src="7.png" alt="img"></p><p>由Java8给出的解释中，我们了解到，还有一个方法也可以中断线程，那就是interrupt方法来中断线程，Java8中给出的解释：</p><p><img src="8.png" alt="img"></p><p>通过看第一行我们就知道，该方法可以中断线程。其他的不必先看，了解之后，开始撸代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束执行"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"石头人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            myThread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被中止了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><p><img src="9.png" alt=""></p><p>如图，虽然线程在1ms之后被中断了，但仍然不影响其他的代码继续执行。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>启动线程：重写run方法，创建对象，用start()方法启动线程</p><p>加入线程：join()方法</p><p>线程礼让：yield()方法</p><p>后台线程（守护线程）：setDaemon(true);设置为守护线程，setDaemon(false);设置为非守护线程，isDaemon();查看当前线程是否为守护线程</p><p>终止线程：stop()方法，但不安全，interrupt()中断线程 ，测试这个线程是否被中断。线程的<em>中断状态</em>不受此方法的影响。忽略线程中断，因为线程在中断时不存在将被该方法返回false所反映。 结果  true如果这个线程已被中断; false否则。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2019/11/12/xian-cheng/"/>
      <url>/2019/11/12/xian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Java中的多线程（一）"><a href="#Java中的多线程（一）" class="headerlink" title="Java中的多线程（一）"></a>Java中的多线程（一）</h2><h4 id="一、Java中代码的一般执行顺序"><a href="#一、Java中代码的一般执行顺序" class="headerlink" title="一、Java中代码的一般执行顺序"></a>一、Java中代码的一般执行顺序</h4><p>如下图：</p><p> <img src="1.png" alt="img"> </p><p>Java中的多线程是相对于单线程而言的，单线程是指程序从头执行到尾没有创建其他的程序，可以用一条线从头到尾串在一起。如下图：</p><p><img src="2.png" alt="img"></p><p>在Java中，如果程序有一条执行路径，那就是单线程程序，</p><p>​                  如果有两条及两条以上的执行路径，那么该程序就是多线程程序。</p><p>如下图：</p><p> <img src="3.png" alt="img"> </p><h4 id="二、线程和进程"><a href="#二、线程和进程" class="headerlink" title="二、线程和进程"></a>二、线程和进程</h4><h5 id="2-1进程"><a href="#2-1进程" class="headerlink" title="2.1进程"></a>2.1进程</h5><p>想要了解线程，就必须要先了解进程，那什么是进程呢？先看一张图：</p><p>Windows下按住：同时按住ctrl+shift+esc</p><p> <img src="4.png" alt="img"> </p><p>所以<strong>进程</strong>就是：正在运行的程序。时系统进行资源分配和调用的独立单位。每一个线程都有它自己的系统资源和内存空间。</p><p>多进程意义：提高CPU使用率，</p><p>问题：一边玩游戏，一边听音乐，这两个进程是同时进行的吗？？（单核cpu为例）</p><p> 答案：不是的，因为根据计算基础操作系统我们可以知道cpu在同一时间片上只能运行一个程序，但我们感觉他们是同时进行的原因是因为，cpu高效切换时间间隔太短，以至于我们感觉不到。</p><h5 id="2-2线程"><a href="#2-2线程" class="headerlink" title="2.2线程"></a>2.2线程</h5><p>在同一个进程内有多个任务，每一个任务我们都可以看做为一个线程。线程是程序执行的基本单元，也叫执行路径，是程序使用CPU的基本单位。</p><p><strong>单线程</strong>：程序只有一条执行路径</p><p><strong>多线程</strong>：程序有多条执行路径</p><p><strong>多线程的意义</strong>：提高应用程率的使用率，程序的执行其实都是抢占CPU的资源，CPU的执行权，线程越多，就越容易抢占CPU的资源，线程的执行有随机性 </p><p>举例：迅雷下载，扫雷。</p><p>大家注意两个词汇的区别：<strong>并发</strong>与<strong>并行</strong>。</p><p>并发：逻辑上同时发生，某一个时间点，同时运行多个程序。</p><p>并行：物理上同时发生，同一个时间内，同时运行多个程序。</p><p><strong>提问</strong>：Java虚拟机启动是单线程还是多线程？</p><p>答案：多线程，因为Java垃圾回收线程也要先启动，否则会出现<strong><em>内存泄漏</em></strong>。所以最低启动了两个线程，所以JVM的启动是多线程的。</p><h4 id="三、手动创建多线程"><a href="#三、手动创建多线程" class="headerlink" title="三、手动创建多线程"></a>三、手动创建多线程</h4><h5 id="3-1创建多线程的方法"><a href="#3-1创建多线程的方法" class="headerlink" title="3.1创建多线程的方法"></a>3.1创建多线程的方法</h5><p>Java不能直接到系统功能，所以我们没有办法直接实现多线程，但是我们可不可以通过调用C/C++来调用系统功能创建进程？答案是肯定的，我们可以通过Java间接的调用系统功能。</p><p> <img src="5.png" alt="img"> </p><p>由API我们可以知道，有两种方法创建多线程。</p><p>创建多线程的方法步骤：</p><p>方法一：</p><p>​           1.自定义MyThread类继承Thread类。</p><p>​           2.MyThread类里面重写run()方法</p><p>​           3.创建对象</p><p>​           4.启动线程</p><p>代码：</p><p>​        自定义类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** *   为什么要重写run()方法 *   因为不是所有的方法都需要被线程执行的，所以为了区别那些代码能够被线程执行， *   Java提供了Thread类中的run()方法用来包裹那些被线程执行的代码。 *   使用Thread中的getName()来获取线程名 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        主函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//启动线程</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//myThread.run();</span>        <span class="token comment" spellcheck="true">//myThread1.run();</span>        <span class="token comment" spellcheck="true">//为什么调用多个然方法时我们并没有感觉是多线程在执行</span>        <span class="token comment" spellcheck="true">//面试题：线程中的run()方法，和start()方法的区别：</span>        <span class="token comment" spellcheck="true">//因为，run()方法直接调用就像调用普通的方法一样，run()方法仅仅是封装需要被多线程执行的代码，直接调用就像普通方法</span>        <span class="token comment" spellcheck="true">// 一样，如果像要开启多线程，就需要start()方法。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果：</p><p> <img src="6.png" alt="img"> </p><p>给线程设置名称：</p><p>自定义类一样，此处省略</p><p>主函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置线程名字</span>        myThread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"斋藤飞鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"桥本环奈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//myThread.run();</span>        <span class="token comment" spellcheck="true">//myThread1.run();</span>        <span class="token comment" spellcheck="true">//为什么调用多个然方法时我们并没有感觉是多线程在执行</span>        <span class="token comment" spellcheck="true">//面试题：线程中的run()方法，和start()方法的区别：</span>        <span class="token comment" spellcheck="true">//因为，run()方法直接调用就像调用普通的方法一样，run()方法仅仅是封装需要被多线程执行的代码，直接调用就像普通方法</span>        <span class="token comment" spellcheck="true">// 一样，如果像要开启多线程，就需要start()方法。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果：</p><p> <img src="7.png" alt="img"> </p><p>所以可以通过setName();来设置名字，通过getName()来获取名字。通过setXxx(); getXxx(); 我们想到可能会有一个成员变量；</p><p>private String name;</p><p>通过源码我们发现果然有一个，private volatile String name;</p><p>我们想到了这种调用的无参构造，总感觉这样太麻烦了，我们想可不可以通过有参构造来进行传值，而且我们查看API发现可以通过传值如下图：</p><p> <img src="8.png" alt="img"> </p><p>说干就干，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无参构造</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//创建对象</span>         MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"斋藤飞鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"桥本环奈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置线程名字</span>         <span class="token comment" spellcheck="true">//myThread.setName("斋藤飞鸟");</span>         <span class="token comment" spellcheck="true">//myThread1.setName("桥本环奈");</span>         <span class="token comment" spellcheck="true">//启动线程</span>         myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//为什么调用多个然方法时我们并没有感觉是多线程在执行</span>         <span class="token comment" spellcheck="true">//因为，run()方法直接调用就像调用普通的方法一样，run()方法仅仅是封装需要被多线程执行的代码，直接调用就像普通方法</span>         <span class="token comment" spellcheck="true">// 一样，如果像要开启多线程，就需要start()方法。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="9.png" alt="img"></p><p>针对如何获取不是Thread类的子类的线程如何获取线程名字呢？</p><p>Thread提供了一个方法：</p><p>public static Thread currentThread();</p><p>返回对当前正在执行的线程对象的引用。 </p><p>具体代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Thread.currentThread().setName("斋藤飞鸟");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：</p><p> <img src="10.png" alt="img"> </p><p>当然也能setName();如下：</p><p> <img src="11.png" alt="img"> </p><h4 id="四、线程的调度模型"><a href="#四、线程的调度模型" class="headerlink" title="四、线程的调度模型"></a>四、线程的调度模型</h4><p>线程有两种调度模型：</p><ol><li><p>分时调度模型：所有线程轮流使用cpu的使用权，平均分配每个占用cpu的时间片</p></li><li><p>抢占式调度模型：让优先级高的线程使用CPU，如果优先级相同，那么会随机选则一个，优先级高的线程使用时间片相对多一些。</p></li></ol><p>Java是用的就是抢占式调度模型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说，被线程执行的方法都是比较耗时的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"斋藤飞鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"桥本环奈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"郑和惠子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        myThread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread2<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><p> <img src="12.png" alt="img"> </p><p>应当注意的是：优先级仅代表随机性大，仅运行一两次不足以体现优先级的差距，应当多次运行，看最终结果。<strong>线程优先级的范围是：1-10</strong>,超出这个范围会抛出 java.lang.IllegalArgumentException，说明参数不合法，所以应当注意优先级的范围。</p>]]></content>
      
      
      <categories>
          
          <category> Java线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/11/11/dan-li-mo-shi/"/>
      <url>/2019/11/11/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、单例模式的介绍"><a href="#一、单例模式的介绍" class="headerlink" title="一、单例模式的介绍"></a>一、单例模式的介绍</h3><p> 单例模式是Java中最简单的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p>应当注意的是：</p><ul><li><p>单例类只能有一个实例</p></li><li><p>单例类必须自己创建自己的唯一实例</p></li><li><p>单例类必须给所有其他对象提供这一事例</p></li></ul><p>下面写一个小的demo:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModel</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个私有的SingleModel对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleModel singleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将构造函数设置为私有这样在对象调用时就不会实例化该类</span>    <span class="token keyword">private</span> <span class="token function">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建一个唯一获取该类对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleModel  <span class="token function">getSingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello 单例模式！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModelDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这样会报错,见下图，编译时会出错</span>        <span class="token comment" spellcheck="true">//SingleModel singleModel = new SingleModel();</span>        <span class="token comment" spellcheck="true">//通过该类的类名调用该类中的静态方法getSingleModel(),获取该类的唯一对象</span>        SingleModel singleModel <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getSingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleModel<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>报错:</p><p> <img src="2.png" alt="img"> </p><p>运行结果:</p><p> <img src="1.png" alt="img"> </p><h3 id="二、单例模式的几种实现方法"><a href="#二、单例模式的几种实现方法" class="headerlink" title="二、单例模式的几种实现方法"></a>二、单例模式的几种实现方法</h3><h4 id="2-1-1-懒汉模式-线程不安全-不支持多线程"><a href="#2-1-1-懒汉模式-线程不安全-不支持多线程" class="headerlink" title="2.1.1 懒汉模式(线程不安全 , 不支持多线程)"></a>2.1.1 懒汉模式(线程不安全 , 不支持多线程)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleModel singleModel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleModel <span class="token function">getSingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleModel <span class="token operator">==</span> null<span class="token punctuation">)</span>            singleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> singleModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello 单例模式中的懒汉模式！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModelDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这样会报错,见下图，编译时会出错</span>        <span class="token comment" spellcheck="true">//SingleModel singleModel = new SingleModel();</span>        <span class="token comment" spellcheck="true">//通过该类的类名调用该类中的静态方法getSingleModel(),获取该类的唯一对象</span>        SingleModel singleModel <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getSingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleModel<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>多线程 : </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModelDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            SingleModel singleModel1 <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleModel1 <span class="token operator">+</span> <span class="token string">" 12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="3.png" alt="1573526650670"></p><p>由上面代码我们可以看出<strong>懒汉模式</strong>的由来 ,  在类加载时并没有直接创建对象 , 而是当程序加载时需要这个对象时才创建买这个对象 , 就好像一个人懒的饿到不行了才去找东西吃一样 . </p><p>这种是最简单的单例模式 , 其实 , 严格意义上来说 , 这并不是单例模式 , 因为没有加  synchronized 锁 , 在多线程下不能正常工作 , 也就是说 , 如果线程是单线程的 , 是按照顺序 ( 串行 ) 的方式执行代码 , 但到了多线程下 , 执行顺序就由串行 , 变为并行 , 如果控制不好就会出现许多意想不到的情况 , 这就是多线程的安全问题 , 所以应当加锁来控制线程并行引起的问题 . </p><p>如果线程数太少的话 , 并不一定会出现上面的那种形式 , 但随着线程数的增加这种方法的弊端就越来越明显 , 这还不到30个线程 , 平均运行三次就会出现 一次 , 试想一下 , 如果有3万个 , 30万个 ,这机会出现极大的概率 ,  所以这种方式是线程不安全的 .  </p><h4 id="2-1-2-懒汉模式-线程安全-支持多线程"><a href="#2-1-2-懒汉模式-线程安全-支持多线程" class="headerlink" title="2.1.2 懒汉模式(线程安全 , 支持多线程)"></a>2.1.2 懒汉模式(线程安全 , 支持多线程)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleModel singleModel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SingleModel <span class="token function">getSingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleModel <span class="token operator">==</span> null<span class="token punctuation">)</span>            singleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> singleModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello 单例模式中的懒汉模式！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModelDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这样会报错,见下图，编译时会出错</span>        <span class="token comment" spellcheck="true">//SingleModel singleModel = new SingleModel();</span>        <span class="token comment" spellcheck="true">//通过该类的类名调用该类中的静态方法getSingleModel(),获取该类的唯一对象</span>        SingleModel singleModel <span class="token operator">=</span> SingleModel<span class="token punctuation">.</span><span class="token function">getSingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleModel<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>多线程 : 和上面的多线程一样 , 就不再写了</p><p>这样的单例模式支持多线程 , 线程安全 , 但加锁会影响效率 . </p><h4 id="2-2-1双检锁-双重校验锁-DCL-即double-checked-locking-线程安全-支持多线程"><a href="#2-2-1双检锁-双重校验锁-DCL-即double-checked-locking-线程安全-支持多线程" class="headerlink" title="2.2.1双检锁/双重校验锁 ( DCL , 即double-checked locking (线程安全 , 支持多线程))"></a>2.2.1双检锁/双重校验锁 ( DCL , 即double-checked locking (线程安全 , 支持多线程))</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span>  SingleModel singleModel <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  SingleModel <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleModel <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingleModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                singleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数和上面的多线程一样 , 就不再写了 , 在这段代码中 , 我们发现了一个明显的新的关键词 , “volatile” 这个关键词起到了至关重要的作用 , 要理解为什么要加上这个关键词 , 我们必须了解对象构造过程 ,  程序实例化一个对象 , 其实可以分为三步 :</p><ul><li><p>分配内存空间</p></li><li><p>初始化对象</p></li><li><p>将内存空间的地址赋值给对应的引用 </p></li></ul><p>由于由于操作系统在执行指令时会进行重排序，所以可能导致实例化一个对象的步骤由上面的三步转变为下面的三个步骤：</p><ul><li>分配内存空间</li><li>将内存空间的地址赋值给对应的引用</li><li>初始化对象</li></ul><p>如果按照上面的步骤进行，那么在多线程下就会将一个没有初始化的对象暴露出来，从而导致不可预料的后果，而加上就不会有这些顾虑了，因为 volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。 一看到有序我们就知道，加上volatile就会使实例化对象的时候变得有序。</p><h4 id="2-3-1-登记式-静态内部类"><a href="#2-3-1-登记式-静态内部类" class="headerlink" title="2.3.1 登记式/静态内部类"></a>2.3.1 登记式/静态内部类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">class</span>  <span class="token class-name">SingleModelHolder</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingleModel SINGLE_MODEL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">SingleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  SingleModel <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingleModelHolder<span class="token punctuation">.</span>SINGLE_MODEL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 主函数和上面的多线程一样 , 就不再写了 。</p><p>这种方法有DCL一样的效果，实现更加简单，但是 这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。 </p><h4 id="2-4-1-枚举"><a href="#2-4-1-枚举" class="headerlink" title="2.4.1 枚举"></a>2.4.1 枚举</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> SingleModel<span class="token punctuation">{</span>      INSTANCE<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whateverMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p> 这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。 </p><p> <strong>经验之谈：</strong>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。 </p><p>摘自：菜鸟教程</p>]]></content>
      
      
      <categories>
          
          <category> java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2019/11/10/dai-li-mo-shi/"/>
      <url>/2019/11/10/dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、代理模式的介绍"><a href="#一、代理模式的介绍" class="headerlink" title="一、代理模式的介绍"></a>一、代理模式的介绍</h3><p>代理模式也是设计模式的一种，何为设计模式： 设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 </p><p>简而言之，设计模式就是一些问题的解决方案。</p><p>今天讲的是设计模式种的代理模式，可能有不足，后续补充。</p><p>举个例子：</p><ul><li>我作为一个资深宅男，除了上班，吃饭，就没事了，但我又不想做饭，于是我叫了外卖。</li><li>我王者荣耀玩的菜，但我还想上分，于是我就请了游戏代练</li><li>写了一点不正经的代码，被警察叔叔带走了，请律师帮我打官司</li></ul><p>无论是外卖、游戏代练、律师他们都是<strong>得帮我们干活</strong>。但是他们<strong>不能一手包办</strong>的，仅仅在“我”的基础上处理一些杂碎的东西(我们不愿意干、或者干不了的东西)。</p><ul><li><p>点外卖的钱，还是我来出，饭还是我来吃</p></li><li><p>上分的游戏账号是我的游戏账号</p></li><li><p>官司输了，牢还是我来做</p></li></ul><p>所以说代理模式就是：<strong>当前对象不愿意干的，没法干的东西委托给别的对象来做，我只要做好本分的东西就好了！</strong></p><h3 id="二、用代码描述代理模式-静态代理"><a href="#二、用代码描述代理模式-静态代理" class="headerlink" title="二、用代码描述代理模式(静态代理)"></a>二、用代码描述代理模式(静态代理)</h3><p>程序员每天都敲代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Jacobshash也是一个程序员（每个程序员每天敲的代码不一样，所以使用了分了接口和实现类）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacobsHash</span> <span class="token keyword">implements</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------跟着Java3y学习动态代理-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这时，jacobshash不想枯燥的敲代码，想红，但是无奈水平有限，所以jacobshash就想到了，请一个programmer大V来一个三连，所以和大V约定好，jacobshash一发作品，大V就三连，慢慢的就红了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProgrammerBigV</span> <span class="token keyword">implements</span>  <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JacobsHash jacobsHash<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProgrammerBigV</span><span class="token punctuation">(</span>JacobsHash jacobsHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jacobsHash <span class="token operator">=</span> jacobsHash<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序员大V三连，点赞，收藏，转发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jacobsHash<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>文章还是有Jacobhash发，大V只负责三连，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过多态和匿名对象来调用</span>        Progromer progromer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgrammerBigV</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JacobsHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progromer<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="1.png" alt=""></p><h3 id="2-1透明代理-普通代理"><a href="#2-1透明代理-普通代理" class="headerlink" title="2.1透明代理(普通代理)"></a>2.1透明代理(普通代理)</h3><p>过了一阵子jacobshash尝到了甜头，他就想让大V只给它一个人三连，于是给足了钱，让大V只做他一个人的生意，于是乎，大V就只做了一个人的生意。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacobsHash</span> <span class="token keyword">implements</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------跟着Java3y学习动态代理-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProgrammerBigV</span> <span class="token keyword">implements</span>  <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JacobsHash jacobsHash<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProgrammerBigV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jacobsHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JacobsHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序员大V三连，点赞，收藏，转发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jacobsHash<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>jacobshash发文章，大V点赞。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过多态和匿名对象来调用</span>        Progromer progromer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgrammerBigV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progromer<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 此时，<strong>真实对象(jacobshash)对外界来说是透明的</strong>。 看不见的。</p><p><img src="1.png" alt=""></p><h3 id="2-2代理类自定义方法"><a href="#2-2代理类自定义方法" class="headerlink" title="2.2代理类自定义方法"></a>2.2代理类自定义方法</h3><p>过了一阵大V发现jacobshash的关注越来越多了，就提出了要求加钱，于是</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacobsHash</span> <span class="token keyword">implements</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------跟着Java3y学习动态代理-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProgrammerBigV</span> <span class="token keyword">implements</span>  <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JacobsHash jacobsHash<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProgrammerBigV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jacobsHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JacobsHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每次加100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序员大V三连，点赞，收藏，转发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jacobsHash<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>jacobshash发文章，大V点赞。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过多态和匿名对象来调用</span>        Progromer progromer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgrammerBigV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progromer<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="2.png" alt=""></p><h3 id="三、动态代理"><a href="#三、动态代理" class="headerlink" title="三、动态代理"></a>三、动态代理</h3><p>过了几年，jacobshash还是没发财，而且大V还累加着要钱，这时，jacobshash认为，他和大V的交易被识破了，一点都没认为是自己不行，这时他又开始找水军来点赞（水军便宜）。</p><p>这是：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacobsHash</span> <span class="token keyword">implements</span> <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------跟着Java3y学习动态代理-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我不请水军"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProgrammerBigV</span> <span class="token keyword">implements</span>  <span class="token class-name">Progromer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JacobsHash jacobsHash<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProgrammerBigV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jacobsHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JacobsHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每次加100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序员大V三连，点赞，收藏，转发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jacobsHash<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upvote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jacobsHash<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>jacobshash发文章，水军点赞。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//jacobsHash请水军</span>        JacobsHash jacobsHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JacobsHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//java8中的lambda方法</span>        Progromer programmerWaterArmy <span class="token operator">=</span> <span class="token punctuation">(</span>Progromer<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>jacobsHash<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jacobsHash<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"coding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>jacobsHash<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"水军来点赞了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>jacobsHash<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        programmerWaterArmy<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        programmerWaterArmy<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过多态和匿名对象来调用</span>        Progromer progromer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgrammerBigV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progromer<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> <img src="3.png" alt="img"> </p><h4 id="3-1动态代理的调用过程"><a href="#3-1动态代理的调用过程" class="headerlink" title="3.1动态代理的调用过程"></a>3.1动态代理的调用过程</h4><p> <img src="4.png" alt="img"> </p><p>其中的Proxy.newProxyInstance(…….);  ，我们可以先看下源码</p><p> <img src="5.png" alt="img"> </p><p>通过源代码我们可以发现</p><p>ClassLoader loader,                                  </p><p>Class&lt;?&gt;[] interfaces,                                     </p><p>InvocationHandler h</p><p>这三个参数依次代表了Proxy.newProxyInstance()方法中的三个参数，</p><p>动态代理调用过程示意图：</p><p> <img src="6.png" alt="img"> </p><h4 id="3-2静态代理和动态代理的区别"><a href="#3-2静态代理和动态代理的区别" class="headerlink" title="3.2静态代理和动态代理的区别"></a>3.2静态代理和动态代理的区别</h4><p>很明显的是：</p><ul><li>静态代理需要自己写代理类–&gt;代理类需要实现与目标对象相同的接口</li><li>而动态代理不需要自己编写代理类—&gt;(是动态生成的)</li></ul><p><strong>使用静态代理时：</strong></p><ul><li>如果目标对象的接口有<strong>很多方法</strong>的话，那我们还是得一一实现，这样就会比较麻烦</li></ul><p><strong>使用动态代理时：</strong></p><ul><li>代理对象的生成，是利用JDKAPI，<strong>动态地在内存中构建代理对象</strong>(需要我们指定创建 代理对象/目标对象 实现的接口的类型)，并且会<strong>默认实现接口的全部方法</strong>。</li></ul><h3 id="四、典型应用"><a href="#四、典型应用" class="headerlink" title="四、典型应用"></a>四、典型应用</h3><p>我们之前写中文过滤器的时候，需要使用包装设计模式来设计一个request类。如果不是Servlet提供了实现类给我们，我们使用包装设计模式会比较麻烦</p><p>现在我们学习了动态代理了，动态代理就是<strong>拦截直接访问对象，可以给对象进行增强的一项技能</strong></p><h4 id="4-1中文过滤器"><a href="#4-1中文过滤器" class="headerlink" title="4.1中文过滤器"></a>4.1中文过滤器</h4><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token keyword">final</span> ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">final</span> HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> req<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> resp<span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放出去的是代理对象</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequest<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断是不是getParameter方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"getParameter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//不是就使用request调用</span>                   <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//判断是否是get类型的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//执行到这里，只能是get类型的getParameter方法了。</span>                String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>本文主要讲解了代理模式的几个要点，其实还有一些细节的：比如“强制代理”(只能通过被代理对象找到代理对象，不能绕过代理对象直接访问被代理对象)。只是用得比较少，我就不说了~~</p><p>要实现动态代理必须要有接口的，<strong>动态代理是基于接口来代理的</strong>(实现接口的所有方法)，如果没有接口的话我们可以考虑cglib代理。</p><p>其实只要记住一点：<strong>原有的对象需要额外的功能，想想动态代理这项技术</strong>！</p><p>本文摘自： <a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484222&amp;idx=1&amp;sn=5191aca33f7b331adaef11c5e07df468&amp;chksm=ebd7423fdca0cb29cdc59b4c79afcda9a44b9206806d2212a1b807c9f5879674934c37c250a1#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484222&amp;idx=1&amp;sn=5191aca33f7b331adaef11c5e07df468&amp;chksm=ebd7423fdca0cb29cdc59b4c79afcda9a44b9206806d2212a1b807c9f5879674934c37c250a1#rd</a> </p>]]></content>
      
      
      <categories>
          
          <category> java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大部分人的一生</title>
      <link href="/2019/11/07/da-bu-fen-ren-de-yi-sheng/"/>
      <url>/2019/11/07/da-bu-fen-ren-de-yi-sheng/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28606052&auto=1&height=66"></iframe></div>## 大部分人的一生<p>18岁，你读了大学。</p><p>——————————————</p><p>20岁，你大二结束，开始悔恨</p><p>自己前两年幼稚的行为</p><p>于是开始努力</p><p>22岁你大学毕业了，却发现</p><p>找不到一份令自己满意的工作</p><p>26岁，你看着身边的人都结了婚</p><p>婚礼的份子钱逐年递增</p><p>春节回家，父母从带你串亲戚</p><p>变成了带你去见相亲对象</p><p>见了十几个姑娘</p><p>你每次都觉得和那个她比</p><p>差了一点</p><p>28岁那年，你遇到了一个和你遭遇差不多的姑娘</p><p>你们有一搭没一搭的聊着</p><p>她说：你还不错</p><p>你喝了一口可乐说：你也是</p><p>你还不确定喜不喜欢她</p><p>双方家长就已经摆好了订婚宴</p><p>结婚的前一周，你和朋友出去喝酒</p><p>你说，不想结婚</p><p>朋友说，你啊，就是想太多。谁不是这么过来的？</p><p>——————————————</p><p>29岁，你们终于结了婚</p><p>婚礼办的不大不小，朋友来的不多不少</p><p>攒了几年想要去实现理想的钱</p><p>搭在了这一场百人的私人庙会上</p><p>婚礼进行到中间</p><p>司仪带着标准的商业化微笑</p><p>对着台下的亲朋喊道</p><p>要不要让他们亲一个！</p><p>台下那些人跟着一起起哄</p><p>不知道为什么</p><p>你简简单单的亲了一口</p><p>俩人恢复到了一开始的站位</p><p>你小声说了一句：我爱你</p><p>那个昨天还看不惯你倒腾模型的新娘</p><p>愣了一下说：我也爱你</p><p>你不确定她是不是对你说的</p><p>就像你不确定是不是对她说的一样</p><p>婚礼结束后，并没有你想象的浪漫</p><p>你听着外屋的新娘一笔一笔的算着份子钱</p><p>想着不过才两年，怎么就变成这样了</p><p>想着想着，洞房夜就睡着了</p><p>————————————</p><p>30岁，她怀孕了</p><p>辞掉了工作，在家养胎</p><p>你在公司逐渐有了点地位</p><p>手里管着十来个人</p><p>独立负责一个项目</p><p>结婚前陪嫁的那辆20万左右的车</p><p>也变成了你一个人的独享</p><p>但你依然不敢放松</p><p>每次加班</p><p>电话那头都是抱怨与委屈</p><p>但你不能争辩什么</p><p>谁让她怀了你的孩子</p><p>在这一刻</p><p>不论是她的父母还是你的父母</p><p>都无条件的站在这一边</p><p>31岁，孩子落地了</p><p>前前后后连孕检带住院费花了10万块钱</p><p>不过无所谓</p><p>你看着你的孩子，怎么看怎么喜欢</p><p>高兴的仿佛这是你的新生</p><p>32岁，这是人生最不愿意重复的一年</p><p>平均睡眠3小时</p><p>孩子每一个小时都要闹腾一次</p><p>第二天拖着睡不醒的眼睛去上班</p><p>老板说你上班不干活</p><p>回家媳妇说你不干活</p><p>你想了半天不明白，那谁干活呢？</p><p>那辆开了3年的车</p><p>成为了你真正的家</p><p>你不在抱怨路上拥堵的交通</p><p>你甚至开始希望</p><p>再多堵一会</p><p>回到家，你关了发动机</p><p>在车上点了一根烟</p><p>这是你每天最幸福的十分钟</p><p>车前是功名利禄，车尾是柴米油盐</p><p>————————————</p><p>35岁 你因为身体越来越差</p><p>加班越来越少</p><p>晋升的速度也越来越缓慢</p><p>那天下班，媳妇告诉你</p><p>孩子要上幼儿园了</p><p>双语的一个月3000</p><p>你皱了皱眉头，那边就已经不耐烦了</p><p>“四单元的老王家孩子，一个月6000”</p><p>“你已经这样了，你想让孩子也输？”</p><p>你没说话，回屋给媳妇转了6000块钱</p><p>这笔钱，你原本打算给自己过个生日，买个新电脑</p><p>————————————</p><p>38岁，孩子上了一年级</p><p>老师说一年级最关键，打好基础很重要</p><p>你笑着说，是是是，老师您多照顾</p><p>新生接待的老师看着你不明事理的脸</p><p>给你指了一条明路</p><p>“课外辅导班，一个月2200”</p><p>40岁的时候，孩子上了三年级</p><p>老师说，三年级，最关键，承上启下很重要</p><p>你笑着说：是是是，正打算再报个补习班</p><p>————————————————</p><p>44岁，孩子上了初中</p><p>有一天回到家，她对你说</p><p>爸爸，我想学钢琴</p><p>你没什么犹豫的</p><p>你以为这些年，你已经习惯了</p><p>但那句“爸爸现在买不起”你始终说不出口</p><p>好在孩子比较懂事</p><p>她说：爸爸没事，要不我先学陶笛也可以</p><p>你看着这么懂事的孩子，却开心不起来</p><p>————————————————</p><p>46岁，孩子上了一个不好不差的高中</p><p>有一天你在开会，接到了老师的电话</p><p>电话里说你的孩子在学校打架了</p><p>叫你去一趟</p><p>你唯唯诺诺的</p><p>和那个比你还小5岁的领导请了个假</p><p>到学校又被老师训了一通</p><p>无非台词就是那一句</p><p>你们做家长的就知道工作，能不能陪陪孩子</p><p>你看着这个老师，有点可笑</p><p>好像当时说：</p><p>家长在外辛苦点</p><p>多赚点钱让孩子多补补课的和他不是一个人</p><p>————————————————</p><p>50岁，孩子上了大学</p><p>很争气，是一个一本</p><p>他学的专业你有点看不懂</p><p>你只知道工作不一定好找</p><p>而且学费还死贵</p><p>你和他深夜想聊聊</p><p>准备了半斤白酒，一碟花生米</p><p>你说着那些曾经你最讨厌的话</p><p>还是要为以后工作着想</p><p>挑个热门的专业</p><p>活着比热爱重要</p><p>你们从交流变成了争吵</p><p>你发现，你老了</p><p>老到可能都打不过这个18岁的孩子</p><p>你说不过他，只能说一句：我是你爸爸！</p><p>孩子看着你，知道再怎么争辩都没用</p><p>这场确立你最后威严的酒局不欢而散</p><p>你听的不真切</p><p>在孩子回自己屋的路上好像叨叨了一句</p><p>“我不想活的像你一样”</p><p>怎么就哭了呢？50岁的人了</p><p>一定是酒太辣了，对不对</p><p>一定是酒太辣了</p><p>————————————————</p><p>55岁，孩子工作了，似乎有一点理解你了</p><p>但你却反了过来，你说不要妥协</p><p>56岁，孩子也结婚了</p><p>你问他喜欢那个姑娘么</p><p>他愣了愣说：喜欢吧</p><p>60岁，辛苦了一辈子，想出去走走</p><p>身边的那个人过了30年</p><p>你依旧分不清到底喜不喜欢</p><p>你们开始规划旅游路线</p><p>这么多年了</p><p>你们还是存在分歧，还是在争吵</p><p>某个瞬间，你觉得</p><p>这样可能也挺好</p><p>一切都准备好了</p><p>儿子说：爸妈，我工作太忙了</p><p>可以帮我照顾一下孩子么</p><p>你们退了机票，又回到了30年前</p><p>———————————————</p><p>70岁，孩子的孩子也长大了，不用天天操心了</p><p>你下定决心说：一定要去玩一趟</p><p>可是手边的拐杖</p><p>只能支持你走到楼下的花园</p><p>75岁，你在医院的病床上</p><p>身边聚满了人，你迷迷糊糊的看见医生摇了摇头</p><p>周围那些人神情肃穆</p><p>你明白了，你要死掉了</p><p>你没有感到一丝害怕</p><p>你突然问自己，我到底是什么时候死掉的呢？</p><p>你想起来30岁的那场婚礼</p><p>原来，那时候，你就死掉了吧</p><p>——————————————</p><p>依照惯例</p><p>死前的3秒，你的大脑要走马灯</p><p>倒叙你这75个年头的一生</p><p>画面一张一张的过</p><p>1秒</p><p>2秒</p><p>两秒过去了</p><p>你面无表情的看着这两秒内的回忆</p><p>第3秒</p><p>突然你笑了</p><p>原来已经回到了15岁的那一年</p><p>——————————————</p><p>你看见一个男孩</p><p>他叼着一袋牛奶，背着书包</p><p>从另一个女孩家的阳台下跑过</p><p>那个男孩朝窗户里看了看</p><p>那是15岁的你暗恋的那个女孩子</p><p>你想不起来她长什么样子了</p><p>最后一秒你努力的回忆着</p><p>然后终于笑了出来</p><p>3秒过去了</p><p>身边的人突然间开始嚎啕大哭</p><p>你可能听不清了</p><p>你最后听到的嘈杂的声音</p><p>是一群十五六的少年 起着哄说的</p><p>答应他</p><p>答应他</p><p>答应他</p><p>不爱你，不度生</p>]]></content>
      
      
      <categories>
          
          <category> -随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nanshou</title>
      <link href="/2019/11/06/nanshou/"/>
      <url>/2019/11/06/nanshou/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1353301300&auto=1&height=66"></iframe></div># 到目前为止的学习心路历程<p> 到目前为止，就一个字：难受！！！</p><p>刚开始大家学习Java我相信大多数人都是跟着视频学的，比如我，先在在黑马上学习Java，然后慕课网上购买学习视频，我相信我收获还是很多的，但现在我突然间发现，其实虽然我看视频的时候跟着一起做项目，感觉自己啥都会，其实仔细想想，自己真就是一个菜鸡，离开了视频就是渣渣一个，但是上班的时候，并没有视频可以学，所以这就导致很多实习生，感觉自己很厉害，单一上班，就懵逼，大眼瞪小眼，啥都不会，所以我们要学会自己总结，</p><p>比如说：</p><p>Spring，Spring MVC，Spring Boot,之间的一同，</p><p>当然，首先最重要的是，Spring Boot 和Spring MVC最大的区别就是注解变多了，xml文件变少了，以前我们想用Spring MVC 框架连接MySQL，我们需要先创建datasource.properties，然后等等一大堆，xml文件，而在Spring Boot中，我们只要在application.properties中配置我们的数据库相关信息，然后Spring Boot就会自动的将我们的idea和数据库相连，简化了相关的工作流程，当然还有其他</p><p>比如：</p><hr><p>好的地方：</p><p>1.零配置</p><p>boot 抛弃了以前的繁琐配置，全程注解</p><p>2.插拔式搭建项目</p><p>boot是个脚手架，如果需要web功能，maven引入对应的jar包；需要集成mybatis，引入包，简单几句注解则组装完成</p><p>3.有可视化服务监控功能</p><p>boot提供了服务监控系统，分客户端与服务器的，可以轻松实现服务监控预警等功能。</p><p>当然也有不完善的地方：</p><p>报错日志不全，让人脑瓜子嗡嗡的，难受</p><hr><p>以下摘自网上，共同学习：</p><p><a href="https://www.zhihu.com/question/64671972/answer/758786513" target="_blank" rel="noopener">https://www.zhihu.com/question/64671972/answer/758786513</a></p><p>spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。<br>spring mvc 是只是spring 处理web层请求的一个模块。</p><p>因此他们的关系大概就是这样：<br>spring mvc &lt; spring &lt;springboot。</p><p>spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.</p><p>spring 框架有超多的延伸产品例如 boot security jpa etc… 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.</p><p>Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。</p><p><img src="1.webp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> -随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/11/04/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2019/11/04/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h2><p>这是我的第一篇博客，同时也会将博客同步到我的网站 <a href="http://www.loltoulan.cn" target="_blank" rel="noopener">http://www.loltoulan.cn</a></p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/04/hello-world/"/>
      <url>/2019/11/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
